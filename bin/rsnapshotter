#!/usr/bin/env python

import datetime
import os
import subprocess
import sys
import time

# Call a command with confirmation
def call_confirm(command):
  print('Executing the command: ' + ' '.join(command))
  print('Continue? y/N')
  answer = sys.stdin.readline()
  if answer.strip() == 'y':
      subprocess.call(command)

# Some logic per backup level

class BackupLevel:
  def __init__(self, root, name, capacity):
    self.root = root
    self.name = name
    self.capacity = capacity

  def getBackupDir(self, i):
    return '{}/{}.{}'.format(self.root, self.name, i)

  def isEmpty(self):
    return not os.path.isdir(self.getBackupDir(0))

  def hasReachedCapacity(self):
    return os.path.isdir(self.getBackupDir(self.capacity - 1))

  def getMostRecentBackupTime(self):
    if self.isEmpty():
      return None
    else:
      timestamp = os.path.getmtime(self.getBackupDir(0))
      return datetime.datetime.fromtimestamp(timestamp)

  def getOldestBackupTime(self):
    for i in range(self.capacity - 1, -1, -1):
      backup_dir = self.getBackupDir(i)
      if os.path.isdir(backup_dir):
        timestamp = os.path.getmtime(backup_dir)
        return datetime.datetime.fromtimestamp(timestamp)
    return None

# First we parse some lines from the config.

config_root = None
config_levels = []

with open('/etc/rsnapshot.conf') as f:
  for line in f.readlines():
    words = line.split()
    if not line.strip().startswith('#') and len(words) > 0:
      if words[0] == 'snapshot_root':
        config_root = words[1]
      elif words[0] == 'retain':
        name = words[1]
        capacity = int(words[2])
        config_levels += [(name, capacity)]

levels = []
for (name, capacity) in config_levels:
  levels += [BackupLevel(config_root, name, capacity)]

# Kind of arbitrary

daily = levels[0]
weekly = levels[1]
monthly = levels[2]

now = datetime.datetime.now()

twelve_hours = datetime.timedelta(hours = 12)
one_week = datetime.timedelta(weeks = 1)
one_month = datetime.timedelta(weeks = 4)

# Check for monthly backup
if (weekly.hasReachedCapacity() and
    (monthly.isEmpty() or
       monthly.getMostRecentBackupTime() <=
       weekly.getOldestBackupTime() - one_month + twelve_hours)):
  call_confirm(['sudo', 'rsnapshot', monthly.name])

# Check for weekly backup
if (daily.hasReachedCapacity() and
    (weekly.isEmpty() or
      weekly.getMostRecentBackupTime() <=
      daily.getOldestBackupTime() - one_week + twelve_hours)):
  call_confirm(['sudo', 'rsnapshot', weekly.name])

# Check for daily backup
if daily.isEmpty() or daily.getMostRecentBackupTime() <= now - twelve_hours:
  call_confirm(['sudo', 'rsnapshot', daily.name])
