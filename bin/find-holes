#!/usr/bin/env python3

################################################################################
# I wrote this script to help me fix the test cases of a compiler. The idea is
# that you have this big directory with test cases, e.g.:
#
#     tests/function0.lw
#     tests/function1.lw
#     tests/variables0.lw
#     tests/variables1.lw
#
# After you update the compiler and add and remove test cases, you can end up
# with something like:
#
#     tests/function0.lw
#     tests/function2.lw
#
# This script helps you detect these cases. In the future, it would be nice if
# this script could also automatically fix these cases.

import sys, os, re
import argparse

################################################################################
# Parse arguments.

parser = argparse.ArgumentParser(description='Find holes in filenames.')
parser.add_argument('directories', metavar='DIR', type=str, nargs='+',
                    help='Directory to search')
parser.add_argument('-0', dest='start', help='Start from 0',
                    action='store_const', const=0)
parser.add_argument('-1', dest='start', help='Start from 1',
                    action='store_const', const=1)

args = parser.parse_args()
if args.start is None: args.start = 0

################################################################################
# Parsing a filename into a number and a string.

def take_number(string):
    numbers = re.findall(r'\d+', string)

    if not numbers:
        return None
    elif len(numbers) > 1:
        print(str.format('Warning: multiple numbers in {}', string),
                file=sys.stderr)
        return None
    elif len(numbers) == 1:
        stripped = re.sub(r'\d+', '', string)
        return (int(numbers[0]), stripped)

################################################################################
# Class for finding holes in sequences

class HoleFinder:
    def __init__(self, start):
        self.sets = dict()
        self.start = start

    def note(self, key, number):
        if key in self.sets:
            self.sets[key].add(number)
        else:
            self.sets[key] = set([number])

    def keys(self):
        return iter(self.sets)

    def missing(self, key):
         missing_numbers = []
         key_set = self.sets[key]
         if not key_set: return []

         for i in range(self.start, max(key_set)):
             if not i in key_set: missing_numbers.append(i)

         return missing_numbers

################################################################################
# Main

hole_finder = HoleFinder(args.start)
all_ok = True

def comma_sep(ls): return ','.join(map(str, ls))

for base in args.directories:
    if len(args.directories) > 1:
        print(str.format("{}:", base))

    for path in os.listdir(base):
        number_and_stripped = take_number(path)
        if number_and_stripped:
            number, key = number_and_stripped
            hole_finder.note(key, number)

    for k in hole_finder.keys():
        missing = hole_finder.missing(k)
        if missing:
            print(str.format('Missing for {}: {}', k, comma_sep(missing)))
            all_ok = False

    if len(args.directories) > 1:
        print("")

if not all_ok: sys.exit(1)
