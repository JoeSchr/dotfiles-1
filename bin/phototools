#!/bin/bash
set -o nounset -o errexit -o pipefail

function take-extension() {
    echo "$1" | sed 's/.*\.//'
}

function drop-extension() {
    echo "$1" | sed 's/\.[^.]*$//'
}

function uppercase() {
    tr '[:lower:]' '[:upper:]'
}

function get-exif-date() {
    local FORMAT="$1"
    local INPUT_FILE="$2"
    local DATETIME="$(exiv2 -g 'Exif.Photo.DateTimeOriginal' -Pv "$INPUT_FILE")"
    local DATE="$(echo "$DATETIME" | sed 's/ .*//' | sed 's/:/-/g')"
    date -d "$DATE" "$FORMAT"
}

function set-exif-title() {
    local INPUT_FILE="$1"
    local TITLE="$2"
    echo $TITLE
    exiv2 -n UTF-8 -M "set Exif.Photo.UserComment '$TITLE'" "$INPUT_FILE"
}

function get-exif-title() {
    local INPUT_FILE="$1"
    exiv2 -g 'Exif.Photo.UserComment' -Pt "$INPUT_FILE"
}

function copy-exif() {
    local INPUT_FILE="$1"
    local OUTPUT_FILE="$2"
    local INPUT_EXV_FILE="$(drop-extension "$INPUT_FILE").exv"
    local OUTPUT_EXV_FILE="$(drop-extension "$OUTPUT_FILE").exv"

    # Dump EXIF to "$INPUT_FILE".exv
    exiv2 ex "$INPUT_FILE"
    if [[ ! -f "$INPUT_EXV_FILE" ]]; then
        echo "EXIF export failed: $INPUT_EXV_FILE not found"
        exit 1
    fi

    # Import EXIF from "$INPUT_FILE.exv"
    if [[ "$INPUT_EXV_FILE" != "$OUTPUT_EXV_FILE" ]]; then
        mv "$INPUT_EXV_FILE" "$OUTPUT_EXV_FILE"
    fi
    exiv2 in "$OUTPUT_FILE"

    # Clean up
    rm "$OUTPUT_EXV_FILE"
}

function watermark() {
    local INPUT_FILE="$1"
    local OUTPUT_FILE="$(drop-extension "$INPUT_FILE").jpg"
    local FONT="Helvetica" # Or convert -list font
    local TITLE="$(get-exif-title "$INPUT_FILE" | uppercase)"
    local DATE="$(get-exif-date '+%B %Y' "$INPUT_FILE" | uppercase)"

    # Check number of arguments
    if [[ $# != 1 ]]; then
        echo "Usage: $0 picture.tif"
        echo "The user-comment exiv2 field must be set to the title."
        exit 1
    fi

    # Check title
    if [[ "$TITLE" = "" ]]; then
        echo "Missing title in user-comment field"
        exit 1
    fi

    # Check extension
    if [[ "$(take-extension "$INPUT_FILE")" != "tif" ]]; then
        echo "Input file should be a TIF"
        exit 1
    fi

    # Remove XMP packet and preview from input file
    exiv2 -d xt "$INPUT_FILE"

    # Convert from TIFF to JPEG, add border and watermark
    convert                                      \
        -background black                        \
        -gravity North                           \
        -splice  0x20                            \
        -bordercolor black                       \
        -border 10                               \
        -fill '#aaaaaa'                          \
        -pointsize 20                            \
        -font "$FONT"                            \
        -gravity NorthWest                       \
        -draw "text 10,6 'JASPER VAN DER JEUGT'" \
        -gravity North                           \
        -draw "text 10,6 '$TITLE'"               \
        -gravity NorthEast                       \
        -draw "text 10,6 '$DATE'"                \
        -quality 98                              \
        "$INPUT_FILE"                            \
        "$OUTPUT_FILE"

    # Copy exif
    copy-exif "$INPUT_FILE" "$OUTPUT_FILE"
}

function grayscale() {
    local INPUT_FILE="$1"
    local OUTPUT_FILE="$2"

    convert -colorspace Gray -compress LZW "$INPUT_FILE" "$OUTPUT_FILE"
    copy-exif "$INPUT_FILE" "$OUTPUT_FILE"
}

function help() {
    cat - <<HERE
USAGE

$0 command args

COMMANDS

get-exif-title picture.jpg

    Retrieve the photograph title

set-exif-title picture.jpg 'A title'

    Set the photograph title

watermark picture.tif

    Export a watermarked version of picture.tif to picture.jpg

copy-exif picture1.tif picture2.tif

    Copy all exif metadata from picture1.tif to picture2.tif

grayscale picture1.tif picture2.tif

    Create a copy of picture1.tif in the grayscale color model

HERE
}

if [[ $# < 1 ]]; then
    help
    exit 1
fi

case "$1" in
    get-exif-title)
        get-exif-title "$2"
        ;;
    set-exif-title)
        set-exif-title "$2" "$3"
        ;;
    watermark)
        watermark "$2"
        ;;
    copy-exif)
        copy-exif "$2" "$3"
        ;;
    grayscale)
        grayscale "$2" "$3"
        ;;
    *)
        help
        exit 1
esac
